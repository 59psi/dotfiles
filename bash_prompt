# main functionality from http://github.com/adamv/dotfiles

txtblk="\[\e[0;30m\]" # Black - Regular
txtred="\[\e[0;31m\]" # Red
txtgrn="\[\e[0;32m\]" # Green
txtylw="\[\e[0;33m\]" # Yellow
txtblu="\[\e[0;34m\]" # Blue
txtpur="\[\e[0;35m\]" # Purple
txtcyn="\[\e[0;36m\]" # Cyan
txtwht="\[\e[0;37m\]" # White
bldblk="\[\e[1;30m\]" # Black - Bold
bldred="\[\e[1;31m\]" # Red
bldgrn="\[\e[1;32m\]" # Green
bldylw="\[\e[1;33m\]" # Yellow
bldblu="\[\e[1;34m\]" # Blue
bldpur="\[\e[1;35m\]" # Purple
bldcyn="\[\e[1;36m\]" # Cyan
bldwht="\[\e[1;37m\]" # White
unkblk="\[\e[4;30m\]" # Black - Underline
undred="\[\e[4;31m\]" # Red
undgrn="\[\e[4;32m\]" # Green
undylw="\[\e[4;33m\]" # Yellow
undblu="\[\e[4;34m\]" # Blue
undpur="\[\e[4;35m\]" # Purple
undcyn="\[\e[4;36m\]" # Cyan
undwht="\[\e[4;37m\]" # White
bakblk="\[\e[40m\]"   # Black - Background
bakred="\[\e[41m\]"   # Red
badgrn="\[\e[42m\]"   # Green
bakylw="\[\e[43m\]"   # Yellow
bakblu="\[\e[44m\]"   # Blue
bakpur="\[\e[45m\]"   # Purple
bakcyn="\[\e[46m\]"   # Cyan
bakwht="\[\e[47m\]"   # White
txtrst="\[\e[0m\]"    # Text Reset

UP_ARROW="↑"
DOWN_ARROW="↓"
UD_ARROW="↕"
FF_ARROW="→"
MIDDOT="•"

function parse_git_branch {
    branch_pattern="# On branch "

    git_status="$(git status 2> /dev/null)"
    
    if [[ ! ${git_status} =~ ${branch_pattern} ]]; then
        # Rebasing?
        toplevel=$(git rev-parse --show-toplevel 2> /dev/null)
        [[ -z "$toplevel" ]] && return

        [[ -d "$toplevel/.git/rebase-merge" || -d "$toplevel/.git/rebase-apply" ]] && {
            sha_file="$toplevel/.git/rebase-merge/stopped-sha"
            [[ -e "$sha_file" ]] && {
                sha=`cat "${sha_file}"`
            }
          
            echo "${bldblk}:${txtrst}${bldblk}[${txtred}rebasing:${bldpur}${sha}${bldblk}]${txtrst}"
        }
        return
    fi

    branch="$(__git_ps1 %s)"

    # Dirty?
    if [[ ! ${git_status} =~ "working directory clean" ]]; then
        [[ ${git_status} =~ "Changes to be committed:" ]] && {
            git_is_dirty="${git_is_dirty}${bldgrn}${MIDDOT}"
        }

        [[ ${git_status} =~ "Changes not staged for commit:" ]] && {
            git_is_dirty="${git_is_dirty}${bldylw}${MIDDOT}"
        }
  
        [[ ${git_status} =~ "Untracked files:" ]] && {
            git_is_dirty="${git_is_dirty}${bldred}${MIDDOT}"
        }
    fi

    echo "${bldblk}:[${txtgrn}${branch}${txtrst}${git_is_dirty}${bldblk}]${txtrst}"
}

function setWindowTitle {
    case $TERM in
        *xterm*|ansi)
        echo -n -e "\033]0;$*\007"
        ;;
    esac
}

function set_prompt {
    prompt_prefix="${bldblk}\u:${bldblu}\w"
    prompt_suffix="${txtrst}${bldblk}\$${txtrst} "
    git_prompt="$(parse_git_branch)"

    export PS1="${prompt_prefix}${git_prompt}${prompt_suffix}"

    setWindowTitle "${this_host}${PWD/$HOME/~}"
}

export PROMPT_COMMAND=set_prompt
